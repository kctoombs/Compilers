%{
    #include <cstdio>
    #include <cstdlib>

    #include "ast.hpp"
    #include "primitive.hpp"
    #include "symtab.hpp"

    #define YYDEBUG 1

    extern Program_ptr ast;
    int yylex(void);
    void yyerror(const char *);
%}

/* Enables verbose error messages */
%error-verbose

/** WRITE ME:
 *  - Put all your token definitions here
 *  - Put all your type definitions here
 *  - Put all your precedence/associativity rules here
 */


%start Start

%token T_Bool
%token T_Char
%token T_Int
%token T_Str
%token T_String
%token T_Intptr
%token T_Charptr
%token T_If
%token T_Else
%token T_While
%token T_Var
%token T_Proc
%token T_Return
%token T_True
%token T_False
%token T_Null

%token T_Semicolon
%token T_Colon
%token T_Lcurly
%token T_Rcurly
%token T_Lparen
%token T_Rparen
%token T_Lbracket
%token T_Rbracket

%token T_Num
%token T_Stringtype
%token T_Chartype
%token T_Identifier



/*Lowest precedence*/
%left T_Comma

/*Next highest precedence*/
%right T_Assignment

/*Next highest precedence*/
%left T_Or

/*Next highest precedence*/
%left T_And

/*Next highest precedence*/
%left T_Equals
%left T_NE

/*Next highest precedence*/ 
%left T_GT
%left T_GTE
%left T_LT
%left T_LTE

/*Next highest Precedence*/
%left T_Plus T_Minus

/*Next highest precedence*/
%left T_Times T_Divide

/*Highest Precedence*/
%right T_Not
%right T_Address
%right T_Dereference

/* $$ essentially means this. Like this.push_back(params)*/

%%


Start       :Procedure
	    { ast = new ProgramImpl($1.u_proc_list);}
            ;

Procedure   : T_Proc T_Identifier T_Lparen ParamList T_Rparen T_Return Type T_Lcurly BodyReturn T_Rcurly Procedure
{$11.u_proc_list->push_front(new ProcImpl(new SymName($2.u_base_charptr), $4.u_decl_list, $7.u_type, $9.u_procedure_block)); $$ = $11;}
            | {$$.u_proc_list = new std::list<Proc_ptr>();}
            ;

ParamList   : T_Identifier MoreParams T_Colon Type MoreTypes
	      {$2.u_symname_list->push_front(new SymName($1.u_base_charptr));
	      $5.u_decl_list->push_front(new DeclImpl($2.u_symname_list, $4.u_type)); $$ = $5;}
	    | {$$.u_decl_list = new std::list<Decl_ptr> ();}
	    ;


MoreParams  : T_Comma T_Identifier MoreParams {$3.u_symname_list->push_front(new SymName($2.u_base_charptr)); $$=$3;}
	    | {$$.u_symname_list = new std::list<SymName_ptr> ();}
	    ;

MoreTypes   : T_Semicolon ParamList  {$$ = $2;}
	    | ParamList {$$ = $1;}
	    ;

Type        : T_Int        {$$.u_type = new TInteger();}
	    | T_Char       {$$.u_type = new TCharacter();}
	    | T_Charptr    {$$.u_type = new TCharPtr();}
	    | T_Intptr     {$$.u_type = new TIntPtr();}
	    | T_Bool       {$$.u_type = new TBoolean();}
	    | T_Str T_Lbracket T_Num T_Rbracket
	    {$$.u_type = new TString(new Primitive($3.u_base_int));}
	    ;


BodyReturn  : Procedure VarDec Statement Return
{$$.u_procedure_block = new Procedure_blockImpl($1.u_proc_list, $2.u_decl_list, $3.u_stat_list, $4.u_return_stat);} 
	    ;


Return	    : T_Return Expr T_Semicolon
	    {$$.u_return_stat = new Return($2.u_expr);} 
	    ;



VarDec      : T_Var T_Identifier MoreVars T_Colon Type T_Semicolon VarDec
	    {$3.u_symname_list->push_front(new SymName($2.u_base_charptr));
 	    $7.u_decl_list->push_front(new DeclImpl($3.u_symname_list, $5.u_type)); $$ = $7;}
	    | {$$.u_decl_list = new std::list<Decl_ptr> ();}
            ;


MoreVars    : T_Comma T_Identifier MoreVars
	    {$3.u_symname_list->push_front(new SymName($2.u_base_charptr)); $$=$3; }
            | {$$.u_symname_list = new std::list<SymName_ptr> ();}
	    ;

	    
StatementP  : Assignment   {$$.u_stat = $1.u_stat;}
	    | FuncCall     {$$.u_stat = $1.u_stat;}
	    | While        {$$.u_stat = $1.u_stat;}
	    | CodeBlock    {$$.u_stat = $1.u_stat;}
/*	    | If           {$$.u_stat = $1.u_stat;}*/
	    | IfWithElse   {$$.u_stat = $1.u_stat;}
	    ;

Statement   : StatementP Statement
	    {$2.u_stat_list->push_front($1.u_stat); $$.u_stat_list = $2.u_stat_list;}
	    | {$$.u_stat_list = new std::list<Stat_ptr> ();}
	    ;


Assignment  : LHS T_Assignment Expr T_Semicolon
	    {$$.u_stat = new Assignment($1.u_lhs, $3.u_expr);}
	    | LHS T_Assignment T_Stringtype T_Semicolon
	    {$$.u_stat = new StringAssignment($1.u_lhs, new StringPrimitive($3.u_base_charptr));}
	    ;



/*RHS	    : Expr          {$$ = $1;}
	    | T_Stringtype  {$$ = $1;}
	    ;
*/

FuncCall    : LHS T_Assignment T_Identifier T_Lparen FuncExpr T_Rparen T_Semicolon
{$$.u_stat = new Call($1.u_lhs, new SymName($3.u_base_charptr), $5.u_expr_list);}
	    ;

FuncExpr    : Expr MoreExpr
{$2.u_expr_list->push_front($1.u_expr); $$.u_expr_list = $2.u_expr_list;}
	    | {$$.u_expr_list = new std::list<Expr_ptr>();}
	    ;

MoreExpr    : T_Comma Expr MoreExpr
	    {$3.u_expr_list->push_front($2.u_expr); $$.u_expr_list = $3.u_expr_list;}
	    | {$$.u_expr_list = new std::list<Expr_ptr>();}
	    ;

/*If	    : T_If T_Lparen Expr T_Rparen CodeBlock MaybeElse
	    {$$.u_stat = new IfNoElse($3.u_expr, $5.u_nested_block);}
	    ;


MaybeElse   : T_Else CodeBlock
	    |
	    ;
*/



IfWithElse  : T_If T_Lparen Expr T_Rparen CodeBlock
	    {$$.u_stat = new IfNoElse($3.u_expr, $5.u_nested_block);}
	    | T_If T_Lparen Expr T_Rparen CodeBlock T_Else CodeBlock
	    {$$.u_stat = new IfWithElse($3.u_expr, $5.u_nested_block, $7.u_nested_block);}
	    ;

While	    : T_While T_Lparen Expr T_Rparen CodeBlock
	    {$$.u_stat = new WhileLoop($3.u_expr, $5.u_nested_block);}
	    ;

CodeBlock   : T_Lcurly VarDec Statement T_Rcurly
	    {$$.u_stat = new CodeBlock(new Nested_blockImpl($2.u_decl_list, $3.u_stat_list));}
	    ;



LHS	    : T_Identifier
	    {$$.u_lhs = new Variable(new SymName($1.u_base_charptr));}
	    | T_Identifier T_Lbracket Expr T_Rbracket
	    {$$.u_lhs = new ArrayElement(new SymName($1.u_base_charptr), $3.u_expr);}
	    | T_Dereference T_Identifier
	    {$$.u_lhs = new DerefVariable(new SymName($2.u_base_charptr));}
	    ;



UnaryExpr   : T_Minus Expr          {$$.u_expr = new Uminus($2.u_expr);}
	    | T_Plus Expr           {$$.u_expr = $2.u_expr;}
	    | T_Num                 {$$.u_expr = new IntLit(new Primitive($1.u_base_int));}
	    | T_True                {$$.u_expr = new BoolLit(new Primitive($1.u_base_int));}
	    | T_False               {$$.u_expr = new BoolLit(new Primitive($1.u_base_int));}
	    | T_Chartype            {$$.u_expr = new CharLit(new Primitive($1.u_base_int));}
	    | T_Identifier          {$$.u_expr = new Ident(new SymName($1.u_base_charptr));}
	    | T_Identifier T_Lbracket Expr T_Rbracket
	    {$$.u_expr = new ArrayAccess(new SymName($1.u_base_charptr), $3.u_expr);}
	    | T_Not UnaryExpr       {$$.u_expr = new Not($2.u_expr);}
	    | T_Dereference Expr
	    {$$.u_expr = new Deref($2.u_expr);}
	    | T_Address LHS {$$.u_expr = new AddressOf($2.u_lhs);}
	    | T_Null                {$$.u_expr = new IntLit(new Primitive($1.u_base_int));}
	    ;


Expr	    : Expr T_Plus Expr     {$$.u_expr = new Plus($1.u_expr, $3.u_expr);}
	    | Expr T_Minus Expr    {$$.u_expr = new Minus($1.u_expr, $3.u_expr);}
	    | Expr T_Times Expr    {$$.u_expr = new Times($1.u_expr, $3.u_expr);}
	    | Expr T_Divide Expr   {$$.u_expr = new Div($1.u_expr,$3.u_expr);}
	    | Expr T_Equals Expr   {$$.u_expr = new Compare($1.u_expr, $3.u_expr);}
	    | Expr T_LT Expr       {$$.u_expr = new Lt($1.u_expr, $3.u_expr);}
	    | Expr T_LTE Expr      {$$.u_expr = new Lteq($1.u_expr, $3.u_expr);}
	    | Expr T_GT Expr       {$$.u_expr = new Gt($1.u_expr, $3.u_expr);}
	    | Expr T_GTE Expr      {$$.u_expr = new Gteq($1.u_expr, $3.u_expr);}
	    | Expr T_NE Expr       {$$.u_expr = new Noteq($1.u_expr, $3.u_expr);}
	    | Expr T_Or Expr       {$$.u_expr = new Or($1.u_expr, $3.u_expr);}
	    | Expr T_And Expr      {$$.u_expr = new And($1.u_expr, $3.u_expr);}
	    | T_Lparen Expr T_Rparen {$$.u_expr = $2.u_expr;}
	    | T_Not T_Lparen Expr T_Rparen {$$.u_expr = new Not($3.u_expr);}
	    | '|' Expr '|'         {$$.u_expr = new AbsoluteValue($2.u_expr);}
	   /* | T_Identifier T_Lparen Expr T_Rparen*/
	    | UnaryExpr            {$$.u_expr = $1.u_expr;}
	    ;


/*Op        : T_Plus Expr
            | T_Minus Expr
	    | T_Times Expr
	    | T_Divide Expr
	    | T_Equals Expr
	    | T_LT Expr
	    | T_LTE Expr
	    | T_GT Expr
	    | T_GTE Expr
	    | T_NE Expr
	    | T_Or Expr
	    | T_And Expr
	    |
	    ;
	    
Expr        : ExprP
            | T_Lparen Expr T_Rparen Op
            | T_Not T_Lparen Expr T_Rparen Op
	    | '|' Expr '|' Op
	    | T_Identifier T_Lparen MoreExpr T_Rparen					            ;

ExprP       : UnaryExpr Op
*/          ;


%%

/** You shall not pass!
 *  You should not  have to do or edit anything past this.
 */

extern int yylineno;

void yyerror(const char *s)
{
    fprintf(stderr, "%s at line %d\n", s, yylineno);
    return;
}
