For this project, I first defined all of my tokens in the parser.ypp file, and then declared how those tokens would be identified by the scanner in the lexer.l file. I did this by writing regular expressions for tokens such as numbers, strings, comments, etc. For lexemes such as 'true' , 'procedure' , or 'null' , I simply matched the literal lexeme and identified it with the corresponding token. I tested the lexer thoroughly to ensure that everything was scanned and tokenized correctly.

Next, I started on my grammar. To implement the grammar, I tried to duplicate the wording in the csimple documentation grammatically. It was difficult to test this at first, because I had to implement almost all of the grammar to test it. I ended up with a lot of shift/reduce conflicts after "completely" implementing my grammar, and fixed these by looking through the parser.output file, identifying which states caused conflicts, and then going through those conflicting states/productions carefully and eliminating the ambiguous productions.
